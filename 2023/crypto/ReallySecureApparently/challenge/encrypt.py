import rsa

e = 98161001623245946455371459972270637048947096740867123960987426843075734419854169415217693040603943985614577854750928453684840929755254248201161248375350238628917413291201125030514500977409961838501076015838508082749034318410808298025858181711613372870289482890074072555265382600388541381732534018133370862587
n = 689061037339483636851744871564868379980061151991904073814057216873412583484720768694905841053416938972235588548525570270575285633894975913717130070544407480547826227398039831409929129742007101671851757453656032161443946817685708282221883187089692065998793742064551244403369599965441075497085384181772038720949
d = 65399441570747996612246087958644390242089073014389060882369755525057949069503

# Generate an RSA public key with the specified values
pub_key = rsa.PublicKey(n, e)

# Save the public key (n, e) to a file
with open('public_key.pem', 'wb') as f:
    f.write(pub_key.save_pkcs1(format='PEM'))

# Encrypt a message using the public key
message = b'Well done! Here is your flag: INTIGRITI{0r_n07_50_53cur3_m4yb3}'
ciphertext = rsa.encrypt(message, pub_key)

# Convert the ciphertext to an integer
ciphertext_int = int.from_bytes(ciphertext, byteorder='big')

# Save the ciphertext as an integer to a binary file
with open('ciphertext', 'wb') as f:
    f.write(ciphertext_int.to_bytes((ciphertext_int.bit_length() + 7) // 8, byteorder='big'))

# Provide participants with the public key (n, e) and ciphertext
print(f"n = {n}")
print(f"e = {e}")
